{
  "AppType": "ASP.NET Core",
  "DetectionPatterns": [
    {
      "FileType": "csproj",
      "Pattern": "Microsoft.AspNetCore.App",
      "IsRegex": false
    },
    {
      "FileType": "csproj",
      "Pattern": "Microsoft.AspNetCore.Mvc",
      "IsRegex": false
    },
    {
      "FileType": "cs",
      "Pattern": "WebApplication.Create",
      "IsRegex": false,
      "FileName": "Program.cs"
    }
  ],
  "AppInsightsIndicators": [
    "Microsoft.ApplicationInsights",
    "ApplicationInsights.AspNetCore",
    "TelemetryClient",
    "AddApplicationInsightsTelemetry",
    ".Track(Event|Exception|Request|Dependency|Metric|Trace|PageView)",
    "ITelemetryProcessor"
  ],
  "MigrationSuggestions": [
    "Replace AddApplicationInsightsTelemetry() with AddOpenTelemetry().UseAzureMonitor()",
    "Use Azure.Monitor.OpenTelemetry.AspNetCore package",
    "Replace TelemetryClient.TrackTrace with appropriate ILogger methods based on SeverityLevel",
    "Convert TrackEvent calls to ILogger.LogInformation with the specific format: ILogger.LogInformation(\"{microsoft.custom_event.name}\", \"EventName\")",
    "Migrate custom ITelemetryProcessor implementations to OpenTelemetry BaseProcessor<Activity>"
  ],
  "MigrationSteps": [
    "1. Modify your project file (.csproj) to replace Application Insights packages with Azure Monitor OpenTelemetry package:",
    "```xml",
    "<!-- REMOVE these Application Insights package references from your .csproj file -->",
    "<PackageReference Include=\"Microsoft.ApplicationInsights\" Version=\"*\" />",
    "<PackageReference Include=\"Microsoft.ApplicationInsights.AspNetCore\" Version=\"*\" />",
    "<PackageReference Include=\"Microsoft.ApplicationInsights.DependencyCollector\" Version=\"*\" />",
    "<PackageReference Include=\"Microsoft.ApplicationInsights.EventCounterCollector\" Version=\"*\" />",
    "<PackageReference Include=\"Microsoft.ApplicationInsights.PerfCounterCollector\" Version=\"*\" />",
    "<PackageReference Include=\"Microsoft.ApplicationInsights.WindowsServer\" Version=\"*\" />",
    "<PackageReference Include=\"Microsoft.ApplicationInsights.WindowsServer.TelemetryChannel\" Version=\"*\" />",
    "",
    "<!-- ADD this Azure Monitor OpenTelemetry package reference to your .csproj file -->",
    "<PackageReference Include=\"Azure.Monitor.OpenTelemetry.AspNetCore\" Version=\"1.2.0\" />",
    "```",
    
    "2. In your Program.cs file, add the necessary using statements and configure OpenTelemetry with Azure Monitor:",
    "```csharp",
    "using Azure.Monitor.OpenTelemetry.AspNetCore;",
    "",
    "var builder = WebApplication.CreateBuilder(args);",
    "",
    "// Add Azure Monitor OpenTelemetry",
    "builder.Services.AddOpenTelemetry().UseAzureMonitor(options => {",
    "    // Connection string can be specified in code, appsettings.json, or environment variables",
    "    options.ConnectionString = \"InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://regionname.in.applicationinsights.azure.com/\";",
    "});",
    "```",

    "3. Replace TelemetryClient.TrackEvent calls with ILogger.LogInformation with a specific format:",
    "```csharp",
    "// Before (Application Insights):",
    "telemetryClient.TrackEvent(\"SomeEvent\");",
    "",
    "// After (ILogger):",
    "ILogger.LogInformation(\"{microsoft.custom_event.name}\", \"SomeEvent\");",
    "```",
    "",
    "4. IMPORTANT: Always follow these rules for TrackEvent conversions:",
    "```",
    "- Always use ILogger.LogInformation for TrackEvent - never use any other log level",
    "- The first parameter must always be the literal string \"{microsoft.custom_event.name}\"",
    "- The second parameter should be the event name string from TrackEvent",
    "- Do not create any Activity, Event, or OpenTelemetry constructs",
    "- Keep it simple - use only ILogger.LogInformation",
    "- IMPORTANT: Your IDE or compiler may show warnings about the {microsoft.custom_event.name} template parameter. DO NOT attempt to \"fix\" these warnings, as this exact format is required for Azure Monitor to recognize custom events.",
    "```",

    "5. Replace TelemetryClient.TrackTrace calls with ILogger equivalent methods based on SeverityLevel:",
    "```csharp",
    "// Before (Application Insights):",
    "TelemetryClient.TrackTrace(\"Some message\", SeverityLevel.Information);",
    "",
    "// After (OpenTelemetry with ILogger):",
    "ILogger.LogInformation(\"Some message\");",
    "```",
    "",
    "6. Use the following mapping for TrackTrace SeverityLevel to ILogger conversion:",
    "```",
    "SeverityLevel.Verbose   => ILogger.LogTrace",
    "SeverityLevel.Information => ILogger.LogInformation",
    "SeverityLevel.Warning     => ILogger.LogWarning",
    "SeverityLevel.Error       => ILogger.LogError",
    "SeverityLevel.Critical    => ILogger.LogCritical",
    "```",
    "",
    "7. If SeverityLevel is not specified for TrackTrace, default to LogInformation:",
    "```csharp",
    "// Before:",
    "TelemetryClient.TrackTrace(\"Some message\");",
    "",
    "// After:",
    "ILogger.LogInformation(\"Some message\");",
    "```",

    "8. For classes that uses TelemetryClient, remove TelemetryClient dependency:",
    "```csharp",
    "// Before:",
    "public class SomeController : Controller",
    "{",
    "    private readonly ILogger<SomeController> _logger;",
    "    private readonly TelemetryClient telemetryClient;",
    "",
    "    public SomeController(ILogger<SomeController> logger, TelemetryClient telemetryClient)",
    "    {",
    "        _logger = logger;",
    "        this.telemetryClient = telemetryClient;",
    "    }",
    "}",
    "",
    "// After:",
    "public class SomeController : Controller",
    "{",
    "    private readonly ILogger<SomeController> _logger;",
    "",
    "    public SomeController(ILogger<SomeController> logger)",
    "    {",
    "        _logger = logger;",
    "    }",
    "}",
    "```",

    "9. Remove any unnecessary Application Insights using statements:",
    "```csharp",
    "// Remove these using statements:",
    "using Microsoft.ApplicationInsights;",
    "using Microsoft.ApplicationInsights.DataContracts;",
    "using Microsoft.ApplicationInsights.Extensibility;",
    "```",

    "10. Migrate any ITelemetryProcessor implementations to OpenTelemetry BaseProcessor<Activity>:",
    "```csharp",
    "// Add the necessary using statements for custom processors:",
    "using System.Diagnostics;  // For Activity",
    "using OpenTelemetry;       // For BaseProcessor",
    "",
    "// Before (Application Insights ITelemetryProcessor):",
    "public class SuccessfulDependencyFilter : ITelemetryProcessor",
    "{",
    "    private ITelemetryProcessor Next { get; set; }",
    "",
    "    public SuccessfulDependencyFilter(ITelemetryProcessor next)",
    "    {",
    "        this.Next = next;",
    "    }",
    "",
    "    public void Process(ITelemetry item)",
    "    {",
    "        var dependency = item as DependencyTelemetry;",
    "        if (dependency == null) return;",
    "",
    "        if (dependency.Success == true)",
    "        {",
    "            return;  // Filter out successful dependencies",
    "        }",
    "",
    "        this.Next.Process(item);",
    "    }",
    "}",
    "",
    "// After (OpenTelemetry BaseProcessor<Activity>):",
    "internal sealed class SuccessfulDependencyFilterProcessor : BaseProcessor<Activity>",
    "{",
    "    public override void OnEnd(Activity activity)",
    "    {",
    "        if (ShouldFilterOut(activity))",
    "        {",
    "            activity.ActivityTraceFlags &= ~ActivityTraceFlags.Recorded;",
    "        }",
    "    }",
    "",
    "    private static bool ShouldFilterOut(Activity activity)",
    "    {",
    "        return activity.Kind == ActivityKind.Client && activity.Status == ActivityStatusCode.Ok;",
    "    }",
    "}",
    "```",
    "",
    "11. Register your custom processor in Program.cs:",
    "```csharp",
    "using Azure.Monitor.OpenTelemetry.AspNetCore;  // For UseAzureMonitor",
    "using OpenTelemetry.Trace;                     // For BaseProcessor",
    "// Add custom processor to the OpenTelemetry pipeline",
    "builder.Services.AddOpenTelemetry().UseAzureMonitor(options => {",
    "    options.ConnectionString = \"YOUR_CONNECTION_STRING\";",
    "}).WithTracing(tracing => {",
    "    tracing.AddProcessor(new SuccessfulDependencyFilterProcessor());",
    "});",
    "```",
    "",
    "12. Key rules for migrating ITelemetryProcessor:",
    "```",
    "- Always migrate to a class derived from BaseProcessor<Activity>",
    "- Move logic from Process(ITelemetry) to OnEnd(Activity)",
    "- Use Activity.Kind to determine original telemetry type:",
    "  - ActivityKind.Server or ActivityKind.Consumer = RequestTelemetry",
    "  - ActivityKind.Client or ActivityKind.Producer = DependencyTelemetry",
    "- If original processor filtered telemetry by not calling Next.Process(item),",
    "  in OpenTelemetry clear the Recorded flag: activity.ActivityTraceFlags &= ~ActivityTraceFlags.Recorded",
    "- Don't create or start/stop Activities in the processor",
    "```",

    "13. SUMMARY: Migration paths for different Application Insights APIs:",
    "```",
    "TrackEvent -> ILogger.LogInformation(\"{microsoft.custom_event.name}\", \"EventName\")",
    "- NOTE: IDE warnings about {microsoft.custom_event.name} should be ignored; this exact format is required",
    "TrackTrace -> ILogger.[LogLevel] based on SeverityLevel",
    "ITelemetryProcessor -> BaseProcessor<Activity> with OnEnd method",
    "```"
  ],
  "SampleCode": "```csharp\n// Examples of Application Insights to OpenTelemetry conversions\n\n// Program.cs configuration with necessary using statements\nusing System.Diagnostics;  // For Activity and ActivityKind\nusing OpenTelemetry;       // For Sdk and registration methods\nusing OpenTelemetry.Trace; // For TracerProviderBuilder\nusing Azure.Monitor.OpenTelemetry.AspNetCore;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container\nbuilder.Services.AddControllersWithViews();\n\n// Add Azure Monitor OpenTelemetry with custom processor\nbuilder.Services.AddOpenTelemetry().UseAzureMonitor(options => {\n    options.ConnectionString = \"Your connection string\";\n}).WithTracing(tracing => {\n    tracing.AddProcessor(new SuccessfulDependencyFilterProcessor());\n});\n\nvar app = builder.Build();\n\n// --------------------\n// ITelemetryProcessor Migration Example\n// --------------------\n\n// Before (Application Insights):\npublic class SuccessfulDependencyFilter : ITelemetryProcessor\n{\n    private ITelemetryProcessor Next { get; set; }\n\n    public SuccessfulDependencyFilter(ITelemetryProcessor next)\n    {\n        this.Next = next;\n    }\n\n    public void Process(ITelemetry item)\n    {\n        var dependency = item as DependencyTelemetry;\n        if (dependency == null) return;\n\n        if (dependency.Success == true)\n        {\n            return;  // Filter out successful dependencies\n        }\n\n        this.Next.Process(item);\n    }\n}\n\n// After (OpenTelemetry):\ninternal sealed class SuccessfulDependencyFilterProcessor : BaseProcessor<Activity>\n{\n    public override void OnEnd(Activity activity)\n    {\n        if (ShouldFilterOut(activity))\n        {\n            activity.ActivityTraceFlags &= ~ActivityTraceFlags.Recorded;\n        }\n    }\n\n    private static bool ShouldFilterOut(Activity activity)\n    {\n        return activity.Kind == ActivityKind.Client && activity.Status == ActivityStatusCode.Ok;\n    }\n}\n\n// --------------------\n// Controller Class Example with TrackEvent/TrackTrace conversions\n// --------------------\npublic class HomeController : Controller\n{\n    private readonly ILogger<HomeController> _logger;\n    \n    // TelemetryClient dependency removed\n    public HomeController(ILogger<HomeController> logger)\n    {\n        _logger = logger;\n    }\n\n    public IActionResult Index()\n    {\n        // TrackEvent conversion - ALWAYS use this exact format\n        // Before: telemetryClient.TrackEvent(\"HomePageVisited\");\n        _logger.LogInformation(\"{microsoft.custom_event.name}\", \"HomePageVisited\"); // NOTE: Ignore any IDE warnings about this format\n        \n        // TrackTrace conversion\n        // Before: telemetryClient.TrackTrace(\"Initiating a call\", SeverityLevel.Information);\n        _logger.LogInformation(\"Initiating a call\");\n        return View();\n    }\n}\n```"
}