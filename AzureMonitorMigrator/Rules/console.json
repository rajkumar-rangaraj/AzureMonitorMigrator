{
  "AppType": "Console",
  "DetectionPatterns": [
    {
      "FileType": "csproj",
      "Pattern": "<OutputType>Exe</OutputType>",
      "IsRegex": false
    }
  ],
  "AppInsightsIndicators": [
    "Microsoft.ApplicationInsights",
    "TelemetryClient",
    ".Track(Event|Exception|Request|Dependency|Metric|Trace|PageView)"
  ],
  "MigrationSuggestions": [
    "Use the OpenTelemetry SDK with Azure.Monitor.OpenTelemetry.Exporter package",
    "Initialize OpenTelemetry with TracerProvider in your Program.cs",
    "Replace TelemetryClient.TrackTrace with ILogger equivalent methods"
  ],
  "MigrationSteps": [
    "1. Modify your project file (.csproj) to replace Application Insights packages with Azure Monitor OpenTelemetry packages:",
    "```xml",
    "<!-- REMOVE these Application Insights package references from your .csproj file -->",
    "<PackageReference Include=\"Microsoft.ApplicationInsights\" Version=\"*\" />",
    "<PackageReference Include=\"Microsoft.ApplicationInsights.DependencyCollector\" Version=\"*\" />",
    "<PackageReference Include=\"Microsoft.ApplicationInsights.EventCounterCollector\" Version=\"*\" />",
    "<PackageReference Include=\"Microsoft.ApplicationInsights.PerfCounterCollector\" Version=\"*\" />",
    "<PackageReference Include=\"Microsoft.ApplicationInsights.WindowsServer\" Version=\"*\" />",
    "<PackageReference Include=\"Microsoft.ApplicationInsights.WindowsServer.TelemetryChannel\" Version=\"*\" />",
    "",
    "<!-- ADD these Azure Monitor OpenTelemetry package references to your .csproj file -->",
    "<PackageReference Include=\"Azure.Monitor.OpenTelemetry.Exporter\" Version=\"1.2.0\" />",
    "<PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"9.0.0\" />",
    "```",
    
    "2. In your Program.cs file, configure OpenTelemetry:",
    "```csharp",
    "using OpenTelemetry;",
    "using OpenTelemetry.Resources;",
    "using OpenTelemetry.Trace;",
    "using Azure.Monitor.OpenTelemetry.Exporter;",
    "using System.Diagnostics;",
    "using Microsoft.Extensions.Logging;",
    "",
    "// Create a logger factory and logger",
    "using var loggerFactory = LoggerFactory.Create(builder => {",
    "    builder.AddConsole();",
    "    builder.AddOpenTelemetry(options => {",
    "        options.AddAzureMonitorLogExporter(o => {",
    "            o.ConnectionString = \"InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://regionname.in.applicationinsights.azure.com/\";",
    "        });",
    "    });",
    "});",
    "var logger = loggerFactory.CreateLogger<Program>();",
    "",
    "// Define your ActivitySource",
    "var myActivitySource = new ActivitySource(\"MyCompany.MyApp\");",
    "",
    "// Configure OpenTelemetry",
    "using var tracerProvider = Sdk.CreateTracerProviderBuilder()",
    "    .SetResourceBuilder(ResourceBuilder.CreateDefault().AddService(\"MyServiceName\"))",
    "    .AddSource(myActivitySource.Name)",
    "    .AddAzureMonitorTraceExporter(options => {",
    "        options.ConnectionString = \"InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://regionname.in.applicationinsights.azure.com/\";",
    "    })",
    "    .Build();",
    "```",
    
    "3. For custom operations tracking, use ActivitySource:",
    "```csharp",
    "// Your application code",
    "using (var activity = myActivitySource.StartActivity(\"SampleOperation\"))",
    "{",
    "    activity?.SetTag(\"customDimension\", \"value\");",
    "    // Your code here",
    "    // Exception handling example:",
    "    try {",
    "        // Code that might throw",
    "    }",
    "    catch(Exception ex) {",
    "        activity?.SetStatus(ActivityStatusCode.Error, ex.Message);",
    "        activity?.RecordException(ex);",
    "    }",
    "}",
    "```",
    
    "4. Replace TelemetryClient.TrackEvent calls with ILogger.LogInformation with a specific format:",
    "```csharp",
    "// Before (Application Insights):",
    "telemetryClient.TrackEvent(\"SomeEvent\");",
    "",
    "// After (ILogger):",
    "ILogger.LogInformation(\"{microsoft.custom_event.name}\", \"SomeEvent\");",
    "```",
    "",
    "5. IMPORTANT: Always follow these rules for TrackEvent conversions:",
    "```",
    "- Always use ILogger.LogInformation for TrackEvent - never use any other log level",
    "- The first parameter must always be the literal string \"{microsoft.custom_event.name}\"",
    "- The second parameter should be the event name string from TrackEvent",
    "- IMPORTANT: Your IDE or compiler may show warnings about the {microsoft.custom_event.name} template parameter. DO NOT attempt to \"fix\" these warnings, as this exact format is required for Azure Monitor to recognize custom events.",
    "```",
    "",
    "6. Use the following mapping for SeverityLevel to ILogger conversion:",
    "```",
    "SeverityLevel.Verbose   => ILogger.LogTrace",
    "SeverityLevel.Information => ILogger.LogInformation",
    "SeverityLevel.Warning     => ILogger.LogWarning",
    "SeverityLevel.Error       => ILogger.LogError",
    "SeverityLevel.Critical    => ILogger.LogCritical",
    "```",
    "",
    "7. If SeverityLevel is not specified, default to LogInformation:",
    "```csharp",
    "// Before:",
    "TelemetryClient.TrackTrace(\"Some message\");",
    "",
    "// After:",
    "ILogger.LogInformation(\"Some message\");",
    "```"
  ],
  "SampleCode": "```csharp\n// Examples of Application Insights to ILogger conversions\n\n// TrackEvent conversions - always use LogInformation with {microsoft.custom_event.name} template\n// Before:\ntelemetryClient.TrackEvent(\"UserSignedUp\");\n// After:\n_logger.LogInformation(\"{microsoft.custom_event.name}\", \"UserSignedUp\"); // NOTE: Ignore any IDE warnings about this format\n\n// Before:\ntelemetryClient.TrackEvent(\"OrderCompleted\");\n// After:\n_logger.LogInformation(\"{microsoft.custom_event.name}\", \"OrderCompleted\"); // NOTE: Ignore any IDE warnings about this format\n\n// TrackTrace conversions - use appropriate log level based on SeverityLevel\n// Before:\n_telemetryClient.TrackTrace(\"Operation started\");\n// After:\n_logger.LogInformation(\"Operation started\");\n\n// Before:\n_telemetryClient.TrackTrace(\"Operation completed\", SeverityLevel.Information);\n// After:\n_logger.LogInformation(\"Operation completed\");\n\n// Before:\n_telemetryClient.TrackTrace(\"Warning condition detected\", SeverityLevel.Warning);\n// After:\n_logger.LogWarning(\"Warning condition detected\");\n\n// Before:\n_telemetryClient.TrackTrace(\"Error occurred\", SeverityLevel.Error);\n// After:\n_logger.LogError(\"Error occurred\");\n\n// Before:\n_telemetryClient.TrackTrace(\"Critical failure\", SeverityLevel.Critical);\n// After:\n_logger.LogCritical(\"Critical failure\");\n\n// Before:\n_telemetryClient.TrackTrace(\"Detailed diagnostic information\", SeverityLevel.Verbose);\n// After:\n_logger.LogTrace(\"Detailed diagnostic information\");\n```"
}